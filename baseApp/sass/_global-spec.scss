// Global, design-approved type styles

// global mobile padding, should be a percentage
$mobile-padding-left-right: 8%;

// XL is for high-priority elements
// L is for modules that, at large views, span > half the page
// M is for modules that span between 1/4 and 1/2 the page at large views
// S is for anything below that 

// title/headline sizes (these use chronicle deck)
$headings: (
	xl: 52 53,
	l: 36 40,
	m: 26 30,
	s: 20 26,
	hero-l: 72 76,
	hero-m: 68 75,
	hero-s: 42 53
);

// body copy sizes (these use chronicle text)
$copy: (
	xl: 18 30,
	l: 18 30,
	m: 16 26,
	s: 16 26,
	hero-l: 18 26,
	hero-m: 22 34,
	hero-s: 16 26,
	description-l: 28 40 // used for intro description on universal page c-module
);

$linkSize: 18 33;

// the article is special:
$article: 20 33;


// spacing may need different handling, so it's staying in its own map for now
$s-paragraph-space: em(20, nth(map-get($copy,s),1) );
$m-paragraph-space: em(30, nth(map-get($copy,m),1) );
$l-paragraph-space: em(20, nth(map-get($copy,l),1) );
$xl-paragraph-space: em(20, nth(map-get($copy,xl),1) );

// headline + p or p + cta spacing
$headline-p-cta-spacing: 20px;


// A few handy functions for getting font vars, plus a mixin for doing both at once

// @function type-size
// get the appropriate font size for a context
// usage:
// font-size: type-size($copy, s);
// ==>> font-size: 14px;
@function type-size($role: $copy, $size: 'm') {
	$map: $role;
	$text-size: nth(map-get($map, $size), 1);
	@return ($text-size*1px);
}

// @function type-height
// get the appropriate line-height for a context
// defaults to returning a relative value (ie 1.5) but can be told to return absolute pixels by setting the third param to false
// usage:
// line-height: type-height($copy, s);
// ==>> line-height: 1.57;
// or
// line-height: type-height($copy, s, false);
// ==>> line-height: 22px;
@function type-height($role: $copy, $size: 'm', $relative: true) {
	$map: $role;
	$line-height: nth(map-get($map, $size), 2);
	@if( $relative ) {
		$line-height: ($line-height / nth(map-get($map, $size), 1));
	}
	@else {
		$line-height: $line-height*1px;
	}
	@return $line-height;
}




// @mixin type-set
// a shortcut for using both of the above, to ensure consistency - use wisely to avoid duplicated css
// not implemented yet, but this may include the ability to set typeface this way as well (optional - again, use cautiously)
// usage:
// .element { @include type-set($copy, s); }
// ==>> .element { font-size: 14px; line-height: 1.57; }
@mixin type-set($role: $copy, $size: 'm', $relative: true, $set-face: false) {
	@if( $set-face ) {
		@if( $role == $copy ) {
			// font-family: chronicle text
		}
		@else {
			// font-family: chronicle deck
		}
	}
	font-size: type-size($role, $size);
	line-height: type-height($role, $size, $relative);
}


// You COULD extend these, but it's not the most manageable pattern in sass
// Better to just use this section as a quick ref for how to set things up;
%xl-copy {@include type-set($copy, xl); }
%l-copy  {@include type-set($copy, l); }
%m-copy  {@include type-set($copy, m); }
%s-copy  {@include type-set($copy, s); }

%xl-header {@include type-set($headings, xl); }
%l-header  {@include type-set($headings, l); }
%m-header  {@include type-set($headings, m); }
%s-header  {@include type-set($headings, s); }

// NEW: there's now a loop in _type.scss that auto-creates styles for headlines and paragraphs
// based on their container's size class. It's kind of rad, to be honest.

// ELEMENT SPACING
// VD says: modules are vertically spaced in a consistent way. Hooray!
$longform-paragraph-spacing: em(30, nth($article, 1));

$gap-sizes: (
    xl: 80px,
    between-modules: 80px,
	l: 60px,
    above-rows: 60px,
    below-section-headers: 40px,
	m: 40px,
    between-rows: 40px,
	s: 20px,
    item-verticals: 20px
);

// @function gap
// Figure out the amount of space to display between two modules. If a type role & size
// are given, the gap measurement will be incorporated with the white space which would
// already exist due to the line height of that kind of type.
// usage:
// .elem { margin: gap($gap-size: 'm'); }
// ==>> .elem { margin: 40px; }
// .elem { margin-bottom: gap($gap-size: m, $role: $headings, $type-size: xl); }
// ==>> .elem { margin-bottom: 0.75em; }
@function gap($gap-size: 'm', $role: false, $type-size: false) {
	$gap-measurement: map-get($gap-sizes, $gap-size);
	@if $role and $type-size {
		$font-size: nth(map-get($role, $type-size), 1);
		$line-height: nth(map-get($role, $type-size), 2);
		@return em($gap-measurement - (($line-height - $font-size) / 2), $line-height);
	}
	@else {
		@return $gap-measurement;
	}
}

// @function heading-gap
// Friendly wrapper around the gap function, for generating space between modules based on
// heading text sizes.
// usage:
// .elem { padding-bottom: heading-gap($gap-size: m, $type-size: xl); }
// ==>> .elem { padding-bottom: 0.75em; }
@function heading-gap($gap-size: 'm', $type-size: 'm') {
	@return gap($gap-size, $headings, $type-size);
}

// @function copy-gap
// Friendly wrapper around the gap function, for generating space between modules based on
// normal copy text sizes.
// usage:
// .elem { margin-bottom: copy-gap($gap-size: s, $type-size: s); }
// ==>> .elem { margin-bottom: 0.73em; }
@function copy-gap($gap-size: 'm', $type-size: 'm') {
	@return gap($gap-size, $copy, $type-size);
}
